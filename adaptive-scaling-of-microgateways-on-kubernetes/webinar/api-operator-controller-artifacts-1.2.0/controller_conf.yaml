#Copyright (c)  WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
#
# WSO2 Inc. licenses this file to you under the Apache License,
# Version 2.0 (the "License"); you may not use this file except
# in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.

apiVersion: v1
kind: ConfigMap
metadata:
  name: controller-config
  namespace: wso2-system
data:
  #mgw toolkit image to initialize/setup the micro gw project
  mgwToolkitImg: wso2am/wso2micro-gw-toolkit:3.2.0
  #mgw runtime image to use in the mgw executable
  mgwRuntimeImg: wso2/wso2micro-gw:3.2.0
  #kaniko image for the kaniko pod which builds the mgw api runtime and pushes to the registry
  kanikoImg: gcr.io/kaniko-project/executor:v0.24.0
  #Required CPU usage for pods.   Default-> resourceRequestCPU: "1000m"
  resourceRequestCPU: "1000m"
  #Required Memory usage pods can use.   Default->  resourceRequestMemory: "512Mi"
  resourceRequestMemory: "512Mi"
  #Max CPU usage limit a pod can use.   Default->  resourceLimitCPU: "2000m"
  resourceLimitCPU: "2000m"
  #Max Memory usage limit a pod can use.   Default->  resourceLimitMemory: "512Mi"
  resourceLimitMemory: "512Mi"

  resourceRequestCPUTarget: "500m"
  #Required Memory usage pods can use for TargetEndPoint.   Default->  resourceRequestMemory: "512Mi"
  resourceRequestMemoryTarget: "512Mi"
  #Max CPU usage limit a pod can use for TargetEndPoint.   Default->  resourceLimitCPU: "2000m"
  resourceLimitCPUTarget: "500m"
  #Max Memory usage limit a pod can use for TargetEndPoint.   Default->  resourceLimitMemory: "512Mi"
  resourceLimitMemoryTarget: "512Mi"
  #Configure readiness probe initial delay for API pod
  readinessProbeInitialDelaySeconds: "8"
  #Configure readiness prob interval for API pod
  readinessProbePeriodSeconds: "5"
  #Configure liveness probe initial delay for API pod
  livenessProbeInitialDelaySeconds: "10"
  #Configure liveness probe interval for API pod
  livenessProbePeriodSeconds: "30"
  #Stop at docker image creation or continue to deploy kubernetes artifact.
  #Default->  generatekubernbetesartifactsformgw: "true"
  generatekubernbetesartifactsformgw: "true"
  #Available modes - ingress, default , route and clusterIP, istio
  operatorMode: "default"
  #Expose custom metrics. Default-> observabilityEnabled: "false"
  observabilityEnabled: "true"

---
apiVersion: v1
kind: Secret
metadata:
  name: apim-secret
  namespace: wso2-system
type: Opaque
data:
  #Base64 encoded username and password for APIM
  username: YWRtaW4=
  password: YWRtaW4=

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: apim-config
  namespace: wso2-system
data:
  #By default hostname verification is disabled. In a production scenario, this has to be enabled.
  verifyHostname: "false"
  #Log level of the managed API (microgateway). Available levels: INFO, DEBUG, TRACE
  logLevel: "INFO"
  #Ports from which the managed API service is getting exposed
  httpPort: "9090"
  httpsPort: "9095"
  #Enable distributed ratelimiting. Default value:false. If enabled please deploy API Portal
  enabledGlobalTMEventPublishing: "false"
  #The central traffic management solution URL (related to distributed ratelimiting)
  #Format: hostname_of_API_Portal:Default_port
  throttleEndpoint: "wso2apim.wso2:9443"
  #Message broker connection URL (related to distributed ratelimiting and token revocation)
  #Format: hostname_of_API_Portal:JMS_port
  jmsConnectionProvider: "wso2apim.wso2:5672"
  #Token revocation
  #Enable real time notifier for token revocation
  enableRealtimeMessageRetrieval: "false"
  #Request and response validation
  enableRequestValidation: "false"
  enableResponseValidation: "false"
  # Enable configurations for retrieving API and subscription data from API Manager.
  enabledEventhub: "false"
  #APIKey issuer configurations
  #APIKey STS token configurations
  enabledAPIKeyIssuer: "true"
  apiKeyKeystorePath: "${mgw-runtime.home}/runtime/bre/security/ballerinaKeystore.p12"
  apiKeyKeystorePassword: "ballerina"
  apiKeyIssuerName: "https://localhost:9095/apikey"
  apiKeyIssuerCertificateAlias: "ballerina"
  validityTime: "-1"
  #Provide the list of allowed APIs by the generated API Key
  allowedAPIs: |
  # - API name given in the API Definition: Allowed versions

  #JWT header when forwarding the request to the backend
  jwtHeader: "X-JWT-Assertion"

  #JWT Generator configurations
  #Enable jwt generator
  enabledJwtGenerator: "false"
  #Dialect prefix that can be added to the claims
  jwtClaimDialect: "http://wso2.org/claims"
  #Signature algorithm used to sign the JWT token (only SHA256withRSA and NONE is supported)
  jwtSigningAlgorithm: "SHA256withRSA"
  #Certificate alias from the keystore
  jwtCertificateAlias: "ballerina"
  #Private key alias from the keystore
  jwtPrivateKeyAlias: "ballerina"
  #JWT token expiry time - ms (valid only if the jwt generator caching mechanism is disabled)
  jwtTokenExpiry: "900000"
  #Restricted claims as a list that should not be included in the backend JWT token
  jwtRestrictedClaims: |
  # "claim1","claim2"

  #Token issuer standard claim
  jwtIssuer: "wso2.org/products/am"
  #Token audience standard claim as a list
  jwtAudience: |
  # "http://org.wso2.apimgt/gateway"

  #JWT token generator implementation
  jwtGeneratorImpl: "org.wso2.micro.gateway.jwt.generator.MGWJWTGeneratorImpl"
  #JWT Generator cache configurations
  #Enable jwt generator token caching
  jwtTokenCacheEnable: "true"
  #Token cache expiry time (ms)
  jwtTokenCacheExpiryTime: "900000"
  #Token cache capacity
  jwtTokenCacheCapacity: "10000"
  #Token cache eviction factor
  jwtTokenCacheEvictionFactor: "0.25"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: hpa-configs
  namespace: wso2-system
data:
  # Horizontal Pod Auto-Scaling for Micro-Gateways
  # Maximum number of replicas for the Horizontal Pod Auto-scale. Default->  maxReplicas: "5"
  mgwMaxReplicas: "5"
  # Metrics configurations
  mgwMetrics: |
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 50
    - type: Pods
      pods:
        metric:
          name: http_requests_total_value_per_second
        target:
          type: AverageValue
          averageValue: 10

  # Horizontal Pod Auto-Scaling for Target-Endpoints
  # Maximum number of replicas for the Horizontal Pod Auto-scale. Default->  maxReplicas: "5"
  targetEndpointMaxReplicas: "5"
  # Metrics configurations
  targetEndpointMetrics: |
    - type: Resource
      resource:
        name: cpu
        target:
          type: Utilization
          averageUtilization: 50
    - type: Pods
      pods:
        metric:
          name: products_http_requests_total_per_second
        target:
          type: AverageValue
          averageValue: 5

  # HPA version. For custom metrics HPA version should be v2beta2. Default-> v2beta1
  hpaVersion: "v2beta2"

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: ingress-configs
  namespace: wso2-system
data:
  ingress.properties: |
    nginx.ingress.kubernetes.io/backend-protocol: HTTPS
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: false
    nginx.ingress.kubernetes.io/enable-cors: true
    nginx.ingress.kubernetes.io/cors-allow-origin: *
    nginx.ingress.kubernetes.io/cors-allow-methods: GET, PUT, POST, DELETE, PATCH, OPTIONS
    nginx.ingress.kubernetes.io/cors-allow-headers: authorization, Access-Control-Allow-Origin, Content-Type, SOAPAction, apikey, Authorization
  ingressResourceName: "api-operator-ingress"
  #Define whether ingress to use http or https endpoint of operator deployment
  ingressTransportMode: "https"
  #Define the hostname of the ingress
  ingressHostName : "mgw.ingress.wso2.com"
  #Define the secret name for TLS certificate
  #tlsSecretName: ""

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: kaniko-arguments
  namespace: wso2-system
data:
  kanikoArguments: |
  #kaniko additional flags should go here: Please refer https://github.com/GoogleContainerTools/kaniko#additional-flags

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: route-configs
  namespace: wso2-system
data:
  route.properties: |
    openshift.io/host.generated: false
  routeName: "api-operator-route"
  #Define whether Route to use http or https endpoint of operator deployment
  routeTransportMode: "http"
  #Define the hostname of the Route
  routeHost : "mgw.route.wso2.com"
  # TLS termination - passthrough, edge, reencrypt
  tlsTermination: ""

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: istio-configs
  namespace: wso2-system
data:
  #Gateway name
  gatewayName: "wso2-gateway"
  #Gateway host
  host: "internal.wso2.com"
  #TLS routes for Virtual Service
  tls: |
    enabled: false
    port: 443
  #CORS policy
  corsPolicy: |
    allowOrigins:
      - exact: https://localhost:9443
    allowMethods:
      - GET
      - POST
      - PUT
      - DELETE
    allowCredentials: true
    allowHeaders:
      - authorization
      - Access-Control-Allow-Origin
      - Content-Type
      - SOAPAction
      - apikey
      - Authorization

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: mgw-deployment-configs
  namespace: wso2-system
data:
  mgwConfigMaps: |
  # Config Maps to be added to mgw deployment. This is an example
  #  - name: test1cm
  #    mountLocation: /home/ballerina/test1cm
  #    subPath: test1cm
  #    namespace: micro
  mgwSecrets: |
  # Secrets to be added to mgw deployment. This is an example
  #  - name: test1secret
  #    mountLocation: /home/ballerina/test1secret
  #    subPath: test1secret
  #    namespace: micro
