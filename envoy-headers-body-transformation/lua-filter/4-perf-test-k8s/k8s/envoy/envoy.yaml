admin:
  access_log_path: /dev/null
  address:
    socket_address:
      address: 127.0.0.1
      port_value: 9000

node:
  cluster: service_greeter
  id: test-id

static_resources:
  listeners:
  - name: listener_0
    address:
      socket_address:
        address: 0.0.0.0
        port_value: 8080
    per_connection_buffer_limit_bytes: 40000000
    filter_chains:
    - filters:
      - name: envoy.filters.network.http_connection_manager
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
          stat_prefix: ingress_http
          codec_type: AUTO
          route_config:
            name: local_route
            virtual_hosts:
            - name: local_service
              domains:
              - "*"
              routes:
              - match:
                  prefix: "/lua"
                route:
                  timeout: 100000s
                  cluster: backend_1
              - match:
                  prefix: "/without"
                route:
                  timeout: 100000s
                  cluster: backend_2
                typed_per_filter_config:
                  envoy.filters.http.lua:
                    "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.LuaPerRoute
                    disabled: true
          http_filters:
          - name: envoy.filters.http.lua1
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
              inline_code: |
                local json = require "lib.json"
                local base64 = require'lib.base64'
                -- json library: https://github.com/rxi/json.lua
                -- base64 library: https://github.com/iskolbin/lbase64

                -- JSON to XML convertion
                function envoy_on_request(request_handle)
                    request_handle:logInfo("Hello Lua1")
                    local request_headers = request_handle:headers()
                    local request_headers_table = {}
                    for key, value in pairs(request_headers) do
                        request_handle:logInfo("Lua1 Request Headers: " .. key .. "->" .. value)
                        request_headers_table[key] = value
                    end
                    local request_body = request_handle:body():getBytes(0, request_handle:body():length())
                    -- request_handle:logInfo("Lua1 Request Body: " .. request_body)

                    local mediation_request_body = {
                        headers=request_headers_table,
                        body=base64.encode(request_body)
                    }

                    local mediation_headers, mediation_response_body_str = request_handle:httpCall(
                        "ext_bal_service",
                        {
                            [":method"] = "POST",
                            [":path"] = "/handlerequest",
                            [":authority"] = "ext_bal_service",
                            ["content-type"] = "application/json",
                        },
                        json.encode(mediation_request_body),
                        100000,
                        false
                    )
                    request_handle:logInfo("Lua1: Done Mediation HTTP Call")
                    -- request_handle:logInfo("Lua1: Mediation body: " .. mediation_response_body_str)

                    for key, value in pairs(mediation_headers) do
                        request_handle:logInfo("Lua1 Request Headers: " .. key .. "->" .. value)
                        request_headers_table[key] = value
                    end

                    -- if mediation_headers[":status"] ~= "200" then
                    --   request_handle:respond({
                    --     [":status"] = "500",
                    --     ["upstream_foo"] = "FOO"
                    --   }, "nope")
                    --   return
                    -- end

                    local mediation_response_body = json.decode(mediation_response_body_str)
                    local content_length = request_handle:body():setBytes(base64.decode(mediation_response_body.body))
                    request_handle:headers():replace("content-length", content_length)

                    for key, val in pairs(mediation_response_body.headersToAdd) do
                        request_handle:headers():add(key, val)
                    end

                    for _, key in ipairs(mediation_response_body.headersToRemove) do
                        request_handle:headers():remove(key)
                    end

                    for key, val in pairs(mediation_response_body.headersToReplace) do
                        request_handle:headers():replace(key, val)
                    end
                end

                function envoy_on_response(response_handle)
                    response_handle:logInfo("Lua: Bye")
                end
          - name: envoy.filters.http.router


  clusters:
  - name: ext_bal_service
    connect_timeout: 200s
    type: LOGICAL_DNS
    dns_lookup_family: V4_ONLY
    lb_policy: ROUND_ROBIN
    load_assignment:
      cluster_name: ext_bal_service
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: ext-bal-service
                port_value: 9090
  - name: backend_1
    connect_timeout: 200s
    type: LOGICAL_DNS
    dns_lookup_family: V4_ONLY
    lb_policy: ROUND_ROBIN
    load_assignment:
      cluster_name: backend_1
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: backend-1
                port_value: 8688
  - name: backend_2
    connect_timeout: 200s
    type: LOGICAL_DNS
    dns_lookup_family: V4_ONLY
    lb_policy: ROUND_ROBIN
    load_assignment:
      cluster_name: backend_2
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: backend-2
                port_value: 8688
