admin:
  access_log_path: /dev/null
  address:
    socket_address:
      address: 127.0.0.1
      port_value: 9000

node:
  cluster: service_greeter
  id: test-id

static_resources:
  secrets:
    - name: mediation_ca_cert
      validation_context:
        trusted_ca:
          filename: /certs/ca.crt
  listeners:
    - name: http_listener
      address:
        socket_address:
          address: 0.0.0.0
          port_value: 8080
      per_connection_buffer_limit_bytes: 40000000
      filter_chains:
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
                stat_prefix: ingress_http
                codec_type: AUTO
                route_config:
                  name: local_route
                  virtual_hosts:
                    - name: local_service
                      domains:
                        - "*"
                      routes:
                        - match:
                            prefix: "/"
                          route:
                            timeout: 100000s
                            cluster: ballerina-backend-service
                        - match:
                            prefix: "/without"
                          route:
                            timeout: 100000s
                            cluster: ballerina-backend-service
                          typed_per_filter_config:
                            envoy.filters.http.lua:
                              "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.LuaPerRoute
                              disabled: true
                  internal_only_headers:
                    - isadmin
                http_filters:
                  - name: envoy.filters.http.lua.mediation
                    typed_config:
                      "@type": type.googleapis.com/envoy.extensions.filters.http.lua.v3.Lua
                      inline_code: |
                        local json = require "lib.json"
                        local base64 = require'lib.base64'
                        -- json library: https://github.com/rxi/json.lua
                        -- base64 library: https://github.com/iskolbin/lbase64
                        
                        -- function envoy_on_request(request_handle)
                        --     local body = ""
                        --     request_handle:logInfo("Hello REQ PATH Lua1")
                        --     for chunk in request_handle:bodyChunks() do
                        --       os.execute("sleep 1")
                        --       -- Clears each received chunk.
                        --       request_handle:logInfo("REQ bodyChunks")
                        --       request_handle:logInfo("REQ chunk length:" .. chunk:length())
                        --       request_handle:logInfo(chunk:getBytes(0, math.min(10, chunk:length())))
                        --       -- body = body .. chunk:getBytes(0, chunk:length())
                        --     end
                        --     request_handle:logInfo("Sedning Request chunks completed")
                        --     -- os.execute("sleep 5")
                        --     -- request_handle:logInfo("Concat body: " .. body)
                        -- end

                        -- function envoy_on_request(request_handle)
                        --     request_handle:logInfo("Hello REQ PATH Lua1")
                        --     request_handle:logInfo("Body Len: " .. request_handle:body():length())
                        --     local request_body = request_handle:body():getBytes(0, request_handle:body():length())
                        --     request_handle:logInfo("Lua1 Request Body: " .. request_body)

                        --     local _, mediation_response_body_str = request_handle:httpCall(
                        --     "mediation_service",
                        --     {
                        --         [":method"] = "POST",
                        --         [":path"] = "/handlerequest",
                        --         [":authority"] = "mediation_service",
                        --         ["content-type"] = "application/json",
                        --         -- ["Transfer-Encoding"] = "chunked",
                        --         -- ["Expect"] = "100-continue",
                        --     },
                        --     request_body,
                        --     100000,
                        --     false
                        -- )
                        -- end
                        
                        function envoy_on_request(request_handle)
                            request_handle:logInfo("Hello Lua1")
                            local request_headers = request_handle:headers()
                            local request_headers_table = {}
                            for key, value in pairs(request_headers) do
                                request_handle:logInfo("Lua1 Request Headers: " .. key .. "->" .. value)
                                request_headers_table[key] = value
                            end
                            local request_body = request_handle:body():getBytes(0, request_handle:body():length())
                        
                            -- request_handle:logInfo("Lua1 Request Body: " .. request_body)
                        
                            local mediation_request_body = {
                                headers=request_headers_table,
                                body=base64.encode(request_body)
                            }
                        
                            local _, mediation_response_body_str = request_handle:httpCall(
                                "mediation_service",
                                {
                                    [":method"] = "POST",
                                    [":path"] = "/handlerequest",
                                    [":authority"] = "mediation_service",
                                    ["content-type"] = "application/json",
                                    -- ["Transfer-Encoding"] = "chunked",
                                    -- ["Expect"] = "100-continue",
                                },
                                json.encode(mediation_request_body),
                                100000,
                                false
                            )
                            request_handle:logInfo("Lua1: Done Mediation HTTP Call")
                            -- request_handle:logInfo("Lua1: Mediation body: " .. mediation_response_body_str)
                        
                            local mediation_response_body = json.decode(mediation_response_body_str)
                            local content_length = request_handle:body():setBytes(base64.decode(mediation_response_body.body))
                            request_handle:headers():replace("content-length", content_length)
                        
                            for key, val in pairs(mediation_response_body.headersToAdd) do
                                request_handle:headers():add(key, val)
                            end
                            for key, val in pairs(mediation_response_body.headersToReplace) do
                                request_handle:headers():replace(key, val)
                            end

                            request_handle:headers():replace("content-length", content_length)
                            
                        end
                        
                        function envoy_on_response(response_handle)
                          for chunk in response_handle:bodyChunks() do
                            -- Clears each received chunk.
                            response_handle:logInfo("Response bodyChunks")
                            response_handle:logInfo(chunk:getBytes(0, chunk:length()))
                          end
                        end
                      
                  - name: envoy.filters.http.router

  clusters:
    - name: service_httpbin
      connect_timeout: 200s
      type: LOGICAL_DNS
      dns_lookup_family: V4_ONLY
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: service_httpbin
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: httpbin.org
                      port_value: 80
    - name: mediation_service
      connect_timeout: 200s
      type: LOGICAL_DNS
      dns_lookup_family: V4_ONLY
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: mediation_service
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: mediation-service-host
                      port_value: 9090
      transport_socket:
        name: envoy.transport_sockets.tls
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.UpstreamTlsContext
          sni: mediation-service-host
          common_tls_context:
            validation_context_sds_secret_config:
              name: mediation_ca_cert
    - name: ballerina-backend-service
      connect_timeout: 200s
      type: LOGICAL_DNS
      dns_lookup_family: V4_ONLY
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: ballerina-backend-service
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: 192.168.8.132
                      port_value: 9080
    - name: ballerina-backend-lua
      connect_timeout: 200s
      type: LOGICAL_DNS
      dns_lookup_family: V4_ONLY
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: ballerina-backend-lua
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: 192.168.8.132
                      port_value: 9091
    - name: ballerina-backend-without
      connect_timeout: 200s
      type: LOGICAL_DNS
      dns_lookup_family: V4_ONLY
      lb_policy: ROUND_ROBIN
      load_assignment:
        cluster_name: ballerina-backend-without
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address:
                      address: 192.168.8.132
                      port_value: 9092
