openapi: 3.0.0
servers:
  # Added by API Auto Mocking Plugin
  - description: Localhost
    url: http://localhost:8080
info:
  description: This is a sample backend
  version: v1
  title: Sample Backend
  contact:
    email: renukapiyumal@gmail.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
tags:
  - name: product
    description: Products of store
paths:
  /products:
    get:
      tags:
        - product
      summary: All Products
      description: All products of the store
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
    post:
      tags:
        - product
      summary: Add Product
      description: Add new products to the store
      requestBody:
        content:
          applicatoin/json:
            schema:
              $ref: "#/components/schemas/Product"

      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        400:
          description: Invalid Product
  /products/{id}:
    get:
      tags:
        - product
      summary: Find product by ID
      description: Returns a single product
      parameters:
        - name: id
          in: path
          description: ID of product to return
          required: true
          schema:
            type: integer
            format: int64
            example: 3
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        400:
          description: Invalid ID supplied
        404:
          description: Product not found
    put:
      tags:
        - product
      summary: Update product by ID
      description: Update a product
      parameters:
        - name: id
          in: path
          description: ID of product to update
          required: true
          schema:
            type: integer
            format: int64
            example: 3
      requestBody:
        content:
          applicatoin/json:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        400:
          description: Invalid ID supplied
        404:
          description: Product not found
    delete:
      tags:
        - product
      summary: Delete product by ID
      description: Delete a product
      parameters:
        - name: id
          in: path
          description: ID of product to delete
          required: true
          schema:
            type: integer
            format: int64
            example: 3
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Result"
        400:
          description: Invalid ID supplied
        404:
          description: Product not found
components:
  schemas:
    Product:
      type: object
      required:
        - name
        - category
        - price
      properties:
        id:
          type: integer
          format: int64
          example: 3
        name:
          type: string
          example: ABC Smart TV
        category:
          type: string
          example: Electronics
        price:
          type: integer
          format: int64
          example: 39999
    Result:
      type: object
      properties:
        result:
          type: string
          example: success
